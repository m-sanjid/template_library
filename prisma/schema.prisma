generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  password      String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  provider      String
  isAdmin       Boolean        @default(false)
  account       Account[]
  CartItem      CartItem[]
  Purchase      Purchase[]
  subscriptions Subscription[]
  Session       Session[]
  Invoice       Invoice[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model CartItem {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal  @default(0.00)
  quantity    Int
  userId      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model Purchase {
  id                   String         @id @default(uuid())
  userId               String
  totalPrice           Decimal
  status               String         @default("pending")
  createdAt            DateTime       @default(now())
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  PurchaseItem         PurchaseItem[]
  customerName         String?
  customerEmail        String?
  customerPhone        String?
  shippingAddressLine1 String?
  shippingAddressLine2 String?
  shippingCity         String?
  shippingState        String?
  shippingPostalCode   String?
  shippingCountry      String?
  paymentIntentId      String?        @unique
  invoiceGenerated     Boolean        @default(false)
  Invoice              Invoice[]
}

model PurchaseItem {
  id          String   @id @default(uuid())
  purchaseId  String
  name        String
  description String
  price       Decimal
  quantity    Int
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

model Invoice {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique
  purchaseId      String
  purchase        Purchase @relation(fields: [purchaseId], references: [id])
  paymentIntentId String?
  items           String
  issueDate       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  notes           String?
  amount          Float
  currency        String?
  filePath        String?
  status          String   @default("paid")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  status               String   @default("active") // active, canceled, expired
  plan                 String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Components {
  id          String   @id @default(cuid())
  name        String
  description String
  codeUrl     String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
